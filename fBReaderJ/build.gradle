//apply plugin: 'com.android.application'
apply plugin: "com.android.model.application"

import org.apache.tools.ant.taskdefs.condition.Os

model{
    android {
        compileSdkVersion 14
        buildToolsVersion "21.1.2"

        defaultConfig {
            applicationId "org.geometerplus.zlibrary.ui.android"
            minSdkVersion.apiLevel 5
            targetSdkVersion.apiLevel 9
            versionCode 1
            versionName "1.0"

//            buildConfigFields {
//                create() {
//                    type "int"
//                    name "VALUE"
//                    value "1"
//                }
//            }
        }
        ndk {
//            moduleName "DeflatingDecompressor-v3"
//            moduleName "LineBreak-v2"
//            moduleName "NativeFormats-v4"
//            moduleName "expat-2.0.1"
//            toolchain = 'clang'
//            CFlags.addAll(['-Wall'])
        }
        buildTypes {
            release {
                minifyEnabled false
                proguardFiles.add(file("proguard-rules.pro"))
                ndk {
                    debuggable true
                }
            }
            debug {
                minifyEnabled false
                ndk {
                    debuggable true
                }
            }
        }

        productFlavors {
            // for detailed abiFilter descriptions, refer to "Supported ABIs" @
            // https://developer.android.com/ndk/guides/abis.html#sa
            create("arm") {
                ndk.abiFilters.add("armeabi")
            }
//            create("arm7") {
//                ndk.abiFilters.add("armeabi-v7a")
//            }
//            create("arm8") {
//                ndk.abiFilters.add("arm64-v8a")
//            }
            create("x86") {
                ndk.abiFilters.add("x86")
            }
//            create("x86-64") {
//                ndk.abiFilters.add("x86_64")
//            }
//            create("mips") {
//                ndk.abiFilters.add("mips")
//            }
//            create("mips-64") {
//                ndk.abiFilters.add("mips64")
//            }
            // To include all cpu architectures, leaves abiFilters empty
            create("all")
        }


    //    productFlavors {
    //        create("flavor1") {
    //            applicationId "com.app"
    //        }
    //    }

        // Configures source set directory.
        sources {
            main {
               jni {
                    source {
                        srcDirs = ['src/main/none']
                    }
                }
                jniLibs{
                    source{
                        srcDirs = ['src/main/libs']
                    }
                }
                }
            }
        task ndkBuild(type: Exec){
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'ndk-build.cmd', '-C', file('src/main').absolutePath
            } else {
                commandLine 'ndk-build', '-C', file('src/main').absolutePath
            }
        }
        tasks.withType(JavaCompile) {
            compileTask -> compileTask.dependsOn ndkBuild

        }
    }
}

//android {
//    compileSdkVersion 14
//    buildToolsVersion "21.1.2"
//
//    defaultConfig {
//        applicationId "org.geometerplus.zlibrary.ui.android"
//        minSdkVersion 5
//        targetSdkVersion 9
//
//        ndk {
//            moduleName "DeflatingDecompressor-v3"
//        }
//    }
//
//    buildTypes {
//        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
//            ndk {
//                debuggable = true
//            }
//        }
//        debug {
//            minifyEnabled false
//            debuggable = true
//            jniDebuggable = true
//        }
//    }
//
//    sourceSets.main {
//        jniLibs.srcDir 'src/main/libs'
//        jni.srcDirs = [] //disable automatic ndk-build call
//    }
//
//    lintOptions {
//        checkReleaseBuilds false
//        // Or, if you prefer, you can continue to check for errors in release builds,
//        // but continue the build even when errors are found:
//        abortOnError false
//    }
//}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:support-v4:21.0.3'
    compile project(':ambilWarna')
    compile project(':library')
    compile project(':code')
//    compile fileTree(include: ['*.jar'], dir: 'libs')

    //    compile fileTree(dir: 'libs', include: ['*.aar'])
    //    compile(name:'ambilWarna-debug', ext:'aar')
//    compile fileTree(include: '*/so', dir: 'libs/armeabi')
//    compile fileTree(include: '*/so', dir: 'libs/armeabi-v7a')
//    compile fileTree(include: '*/so', dir: 'libs/mips')
//    compile fileTree(include: '*/so', dir: 'libs/x86')
    //    compile files('libs/httpmime-4.2.5.jar')
    //    compile files('libs/json-simple-1.1.1.jar')
    //    compile files('libs/LingvoIntegration_2.5.2.12.jar')
    //    compile files('libs/nanohttpd-2.0.5.jar')
    ////    compile files('libs/open-dictionary-api-1.2.1.jar')
    //    compile files('libs/pdfparse.jar')
    compile files('libs/httpmime-4.2.5.jar')
    compile files('libs/nanohttpd-2.0.5.jar')
    compile files('libs/pdfparse.jar')
    compile files('libs/json-simple-1.1.1.jar')
    compile files('libs/LingvoIntegration_2.5.2.12.jar')
}

/*
// call regular ndk-build(.cmd) script from app directory
task ndkBuild(type: Exec) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'ndk-build.cmd', '-C', file('src/main/jni').absolutePath
    } else {
        commandLine 'ndk-build', '-C', file('src/main/jni').absolutePath
    }
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn ndkBuild
}
*/